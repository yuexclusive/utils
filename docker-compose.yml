version: "3"
services:  
  # redis:
  #   image: redis
  #   ports:
  #     - 6379:6379
  #   volumes:
  #     - $HOME/docker_volumes/redis:/data

  # mysql:
  #   image: mysql/mysql-server:latest
  #   ports: 
  #     - 3306:3306
  #     - 33060:33060
  #   command: --default-authentication-plugin=mysql_native_password
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=123456
  #   volumes:
  #     - $HOME/docker_volumes/mysql:/var/lib/mysql
  #     - $HOME/golang/utils/future_mysql.sql:/docker-entrypoint-initdb.d/future.sql

  # postgres:
  #   image: postgres
  #   environment: 
  #     - POSTGRES_PASSWORD=123456
  #   ports:
  #     - 5432:5432
  #   volumes:
  #     - $HOME/docker_volumes/postgres:/var/lib/postgresql/data
  #     - $HOME/golang/utils/future_postgres.sql:/docker-entrypoint-initdb.d/future_postgres.sql

  # mongo:
  #   image: mongo:latest
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - $HOME/docker_volumes/mongo:/data/db

  #------------------------------------------------

    
  #   master_mongo:
  #   container_name: master_mongo
  #   image: mongo:latest
  #   ports:
  #     - 37017:27017
  #   command: ["--replSet","myset","--bind_ip_all"]
  #   volumes:
  #     - /data/cluster/db1:/data/db
  #   backup_mongo:
  #   container_name: backup_mongo
  #   image: mongo:latest
  #   ports:
  #     - 37018:27017
  #   command: ["--replSet","myset","--bind_ip_all"]
  #   volumes:
  #     - /data/cluster/db2:/data/db
  #   arbi_mongo:
  #   container_name: arbi_mongo
  #   image: mongo:latest
  #   ports:
  #     - 37019:27017
  #   command: ["--replSet","myset","--bind_ip_all"]
  #   volumes:
  #     - /data/cluster/db3:/data/db

  # etcd:
  #   image: 'bitnami/etcd:latest'
  #   environment:
  #     - ALLOW_NONE_AUTHENTICATION=yes
  #     - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
  #   ports:
  #     - 2379:2379
  #     - 2380:2380

  # pulsar:
  #   image: apachepulsar/pulsar
  #   restart: always
  #   ports:
  #     - 6650:6650
  #     - 8080:8080  
  #   command: bin/pulsar standalone
      
  # nats: 
  #   image: nats
  #   ports:
  #     - 4222:4222
  #     - 8222:8222   
  
  # zookeeper:
  #   image: 'bitnami/zookeeper:latest'
  #   ports:
  #     - '2181:2181'
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes

  # kafka:
  #   image: 'bitnami/kafka:latest'
  #   ports:
  #     - '30006:9092'
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://10.86.15.49:30006
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   depends_on:
  #     - zookeeper

  # micro-api:
  #   image: micro/micro
  #   command: api
  #   depends_on:
  #     - etcd
  #   ports:
  #     - 9000:8080
  #   environment:
  #     - MICRO_ADDRESS=:8080
  #     - MICRO_REGISTRY=etcd
  #     - MICRO_REGISTRY_ADDRESS=etcd:2379
  #     - MICRO_API_HANDLER=http
  #     - MICRO_API_NAMESPACE=go.micro.api
  #     # - MICRO_ENABLE_TLS=true 
  #     # - MICRO_TLS_CERT_FILE=/entropic-death.site.crt
  #     # - MICRO_TLS_KEY_FILE=/entropic-death.site_key.key
  #   # volumes:
  #   #   - $HOME/ssl/entropic-death.site.crt:/entropic-death.site.crt
  #   #   - $HOME/ssl/entropic-death.site_key.key:/entropic-death.site_key.key

  # micro-web:
  #   image: micro/micro
  #   command: web
  #   depends_on:
  #     - etcd
  #   ports:
  #     - 8082:8082
  #   environment:
  #     - MICRO_ADDRESS=:8082
  #     - MICRO_REGISTRY=etcd
  #     - MICRO_REGISTRY_ADDRESS=etcd:2379

  # elasticsearch:
  #   image: elasticsearch:7.14.2
  #   ports: 
  #     - 9200:9200
  #   environment:
  #     discovery.type: "single-node"
  #     ES_JAVA_OPTS: " -Xms256m -Xmx256m"
  #   volumes:
  #     - $HOME/docker_volumes/elasticsearch:/usr/share/elasticsearch/data
    
  # kibana:
  #   image: kibana:7.14.2
  #   ports:
  #     - 5601:5601
  #   volumes:
  #     - $HOME/docker_volumes/kibana.yml:/usr/share/kibana/config/kibana.yml
  #   # docker cp $HOME/kibana.yml crawler_kibana_1:/usr/share/kibana/config/kibana.yml
  
  # jaeger-collector:
  #   image: jaegertracing/jaeger-collector
  #   restart: always
  #   environment:
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #     - ES_SERVER_URLS=http://elasticsearch:9200
  #     - ES_USERNAME=elastic
  #     - LOG_LEVEL=debug
  #   ports: 
  #     - 14267:14267
  #   depends_on:
  #     - elasticsearch

  # docker run -d -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 -p 5775:5775/udp -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778  -p 16686:16686 -p 14268:14268  -p 14269:14269   -p 9411:9411 jaegertracing/all-in-one:latest
  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   environment:
  #     - COLLECTOR_ZIPKIN_HTTP_PORT=9411
  #   ports:
  #     - "5775:5775/udp"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #     - "16686:16686"
  #     - "14268:14268"
  #     - "14269:14269"
  #     - "9411:9411"


  # jaeger-agent:
  #   image: jaegertracing/jaeger-agent
  #   restart: always
  #   environment:
  #     - COLLECTOR_HOST_PORT=jaeger-collector:14267
  #     - LOG_LEVEL=debug
  #   ports:
  #     - "5775:5775/udp"
  #     - "5778:5778"
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #   depends_on:
  #     - jaeger-collector

  # jaeger-query:
  #   image: jaegertracing/jaeger-query
  #   restart: always
  #   environment:
  #     - SPAN_STORAGE_TYPE=elasticsearch
  #     - ES_SERVER_URLS=http://elasticsearch:9200
  #     - ES_USERNAME=elastic
  #     - LOG_LEVEL=debug
  #   ports:
  #     - 16686:16686
  #   depends_on:
  #     - elasticsearch

  # prometheus:
  #   image: prom/prometheus
  #   ports: 
  #     - 9090:9090
  #   volumes:
  #     - $HOME/docker_volumes/prometheus.yml:/etc/prometheus/prometheus.yml

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - 3000:3000
  #   depends_on: 
  #     - prometheus

  # gogs:
  #   image: gogs/gogs
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "3000:3000"
  #     - "22:22"
  #   volumes:
  #     - $HOME/docker_volumes/gogs:/data


  # gitea:
  #   image: gitea/gitea
  #   container_name: gitea
  #   environment:
  #     - USER_UID=1000
  #     - USER_GID=1000
  #     - GITEA__database__DB_TYPE=postgres
  #     - GITEA__database__HOST=10.86.12.184:5432
  #     - GITEA__database__NAME=gitea
  #     - GITEA__database__USER=postgres
  #     - GITEA__database__PASSWD=123456
  #   depends_on: 
  #     - postgres
  #   restart: always
  #   volumes:
  #     - $HOME/docker_volumes/gitea:/data
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   ports:
  #     - "3000:3000"
  #     - "222:22"


  # drone:
  #   image: drone/drone
  #   depends_on:
  #     - gogs
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   environment:
  #     - DRONE_GIT_ALWAYS_AUTH=false
  #     - DRONE_AGENTS_ENABLED=true
  #     - DRONE_RPC_SECRET=123456key
  #     - DRONE_GOGS_SERVER=http://gogs:3000
  #     - DRONE_RUNNER_CAPACITY=2
  #     - DRONE_SERVER_HOST=drone
  #     - DRONE_SERVER_PROTO=http
  #     - DRONE_TLS_AUTOCERT=false
  #     - TZ=PRC
  #     - detach=true
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - $HOME/docker_volumes/drone:/data

  # drone-runner-docker:
  #   image: drone/drone-runner-docker:1
  #   depends_on: 
  #     - drone
  #   ports: 
  #     - "3001:3000"
  #   environment:
  #     - DRONE_RPC_PROTO=http
  #     - DRONE_RPC_HOST=drone:80
  #     - DRONE_RPC_SECRET=123456key
  #     - DRONE_RUNNER_CAPACITY=2
  #     - DRONE_RUNNER_NAME=common-drone-runner
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock


  # registry:
  #   image: registry:2
  #   ports:
  #     - "5000:5000"

  # consul: 
  #   image: consul
  #   ports:
  #     - 8500:8500
  #   volumes:
  #     - $HOME/docker_volumes/consul:/consul/data

  # reverse-proxy:
  #   # The official v2 Traefik docker image
  #   image: traefik:v2.5
  #   # Enables the web UI and tells Traefik to listen to docker
  #   command: --api.insecure=true --providers.docker
  #   ports:
  #     # The HTTP port
  #     - "9000:80"
  #     # The Web UI (enabled by --api.insecure=true)
  #     - "9090:8080"
  #   volumes:
  #     # So that Traefik can listen to the Docker events
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     # - /$HOME/docker_volumes/traefik/traefik.toml:/etc/traefik/traefik.toml

  # # # 改镜像会暴露出自身的 `header` 信息
  # # whoami:
  # #   image: containous/whoami
  # #   labels:
  # #     # 设置Host 为 whoami.docker.localhost 进行域名访问
  # #     - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"

  # test:
  #   image: test:latest
  #   labels:
  #     # 设置Host 为 test.localhost 进行域名访问
  #     - "traefik.http.routers.fuck.rule=Host(`fuck.localhost`)"

  golang:
    image: golang
      

# networks:
#   default:
#     external:
#       name: future_default




